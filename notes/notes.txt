Nightwatch Js
    - https://nightwatchjs.org/
    - Nightwatch JS is an E2E testing framework written in Node JS
    - Nightwatch and Chromedriver are needed and can be installed via NPM
        - npm install nightwatch chromedriver
Setup Nightwatch
    - Nightwatch requires having a nightwatch.json configuration file
    - This file will have the base configuration
    - On some systems the base configuration will have an error
        - The following line will need to be added for the server path declaration 
        - 'server_path': require('chromedriver').path
        - There is also a need to add a nightwatch.conf.js file in some instances
        - This seems to be on Windows platform and the js file should be in the root of the project

Test Runners
    - Nightwatch has its own test runner and assertion library 
    - Other frameworks have a lot of dependencies that you will have to install and tie together
    - A file can begin with module.exports to define an object
        - The test name is then defined within the object
            - This will be a function which accepts an argument
            - The argument is the browser object but you can define it to use any name
    - A specific test can also be ran
        - ./node_modules/.bin/nightwatch -t ./tests/<test_name>
        - In this case -> ./node_modules/.bin/nightwatch -t ./tests/nightwatch.basic.test.js
    - Mocha
        - Nightwatch gives users the option to use the Mocha BDD (Behavior Driven Development) interface to write your tests using their default test runner
        - Since version 1.3, Nightwatch has created their own Mocha interface that users can use so they would no longer have to create a config file 
        - nightwatch_mocha.json file is needed to be able to add test_runner to

Elements
Finding Elements
    - Nightwatch provides many different ways to find elements
    - The base way is the element function
        - element returns a web element JSON object
    - The .elements() function searches for multiple elements and returns the web element objects for those
        - This is the same as element but for multiple elements instead of singular

Element Interaction
    - There are a few methods that can be used for element interaction
        - clearValue -> this clears a text field that maybe under test
        - click, keys, moveToElement, setValue
        - moveToElement basically moves the cursor to a particular XY offset on the browser
        - click as expected clicks on a specified selector

Element State
    - Looking at 3 main methods
        - getText(), getValue(), isVisible()
    - getText() returns the visible text for an element
        - It requires a selector and a callback as parameters
        - This will return an object unless just the value is returned
    - getValue() is very similar to getText()
        - getValue works for form elements though and getText does not
        - This means that getValue will be needed for getting values that are within the form fields
        - setValue can be used to set a value in the field being tested if necessary
    - isVisible() will just determine if an element is visible or not
        - It will return either a true or false
        - If the element is visible there will a true returned

Navigation
    - init() function is an alias to the URL command that is used to navigate to a URL
        - In the nightwatch.json file there can be a launch url specified
        - This is added under default and is the base url for navigating to
    - url() is used to navigate to a specific URL
    - back() and forward()
        - As to be expected this navigate backwards and forwards in the browser
    - getTitle() returns the title of the current page
    - refresh() basically refreshes the current page
        - This can be useful when doing something on a page that needs to be refreshed in order to be shown
    - urlHash() this adds a specified hashtag to our current launch URL
        - The value should be seen in the url when test is ran

Actions
User Actions & Prompts
    - keys() this method sends a sequence of strokes to an active element
        - Different keys can be referenced through the Nightwatch client.Keys object
            - This is an uppercase K
        - There are some predefined keys based on the W3C WebDriver draft spec
        - An issue however is that Nightwatch, in their documentation, did not actually give a list of the available keys
        - The way to see keys is to create a file that will send the Keys object to the console
            - console.log(JSON.stringify(client.Keys, null, '\t'))
        - This may be added to documentation in the future
    -

